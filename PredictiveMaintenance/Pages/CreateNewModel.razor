@page "/create-model"
@using PredictiveMaintenance.Interfaces
@using PredictiveMaintenance.Models
@using PredictiveMaintenance.Services
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IPredictionService PredictionService
@inject ModelSelectionService ModelSelectionService

<h3>Create Model</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
<div class="row">
<!-- CSV Files Section -->
@if (csvFiles != null)
{
    <div class="col-md-6"> <!-- Adjusted to take half the width of the row -->
        <div class="card">
            <div class="card-header bg-warning text-dark">CSV Files</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var file in csvFiles)
                    {
                        <li class="list-group-item">
                            <input type="checkbox" checked="@selectedCsvFiles[file]" @onchange="@(e => OnCsvCheckboxChanged(file, (bool)e.Value))" /> @file
                        </li>
                    }
                </ul>
                <button class="btn btn-primary mt-2" @onclick="PerformActionWithCsv">Calculate new model</button>
            </div>
        </div>
    </div>
}

<!-- Select Date Range for CSV Section -->
<div class="col-md-6"> <!-- Adjusted to take the remaining half width of the row -->
    <div class="card">
        <div class="card-header bg-warning text-dark">Select Date Range for CSV</div>
        <div class="card-body">
            <input type="date" @bind="startDate" />
            <input type="date" @bind="endDate" />
            <button class="btn btn-primary mt-2" @onclick="CreateNewCsvFile">Create new csv file</button>
        </div>
    </div>
</div>
</div>

<div class="row">
    @if (modelList != null)
    {
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white">Model List</div>
                <div class="card-body">
                    @foreach (var model in modelList)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="@model"
                                   checked="@selectedModels[model]"
                                   @onchange="@(e => OnModelCheckboxChanged(model, (bool)e.Value))" />
                            <label class="form-check-label">@model</label>
                        </div>
                    }
                    <button class="btn btn-primary mt-2" @onclick="SetModelToCalcWith">Set Model to Calc</button>
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            @successMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>
@if (predictionResult != null)
{
    <div class="card">
        <div class="card-header">Prediction Result</div>
        <div class="card-body">
            <h5>Status: @predictionResult.Status</h5>
            <p>ROC AUC Score: @predictionResult.RocAucScore</p>
            <h5>Classification Report</h5>
            <p>Accuracy: @predictionResult.ClassificationReport.Accuracy</p>
            
            @* Display Metrics for each classification with the new style *@
            @DisplayMetrics("Class 0", predictionResult.ClassificationReport.Zero)
            @DisplayMetrics("Class 1", predictionResult.ClassificationReport.One)
            @DisplayMetrics("Class 2", predictionResult.ClassificationReport.Two)
            @DisplayMetrics("Class 3", predictionResult.ClassificationReport.Three)
            @DisplayMetrics("Class 4", predictionResult.ClassificationReport.Four)
            
            @* Averages with new style *@
            <h5>Macro Average</h5>
            @DisplayMetrics("Macro Avg", predictionResult.ClassificationReport.MacroAvg)
            <h5>Weighted Average</h5>
            @DisplayMetrics("Weighted Avg", predictionResult.ClassificationReport.WeightedAvg)
        </div>
    </div>
}
@code {
        private PredictionResult predictionResult;
    private List<string> csvFiles;
    private List<string> modelList;
    private Dictionary<string, bool> selectedModels = new Dictionary<string, bool>();
    private Dictionary<string, bool> selectedCsvFiles = new Dictionary<string, bool>();
    private string successMessage;
    private string errorMessage;
    private DateTime startDate = DateTime.Now.AddDays(-30); 
    private DateTime endDate = DateTime.Now; 

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await ListModels();

            if (modelList != null)
            {
                foreach (var model in modelList)
                {
                    selectedModels[model] = false;
                }
            }

            await ListCsvFiles();
        }
        catch (Exception ex)
        {
            errorMessage = "Initialization Error: " + ex.Message;
        }
    }

    private async Task ListCsvFiles()
    {
        try
        {
            DateTime dateTime = DateTime.Now; // Or any required date
            csvFiles = await PredictionService.GetCsvFileData(dateTime);

            if (csvFiles != null)
            {
                foreach (var file in csvFiles)
                {
                    selectedCsvFiles[file] = false; // Initialize all as not selected
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error listing CSV files: " + ex.Message;
        }
    }
    private RenderFragment DisplayMetrics(string title, MetricDetails metrics) => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "metric-container");
        
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "metric-title");
        builder.AddContent(4, title);
        builder.CloseElement();
        
        builder.OpenElement(5, "p");
        builder.AddAttribute(6, "class", "metric-value");
        builder.AddContent(7, $"F1-Score: {metrics.F1Score}");
        builder.CloseElement();
        
        builder.OpenElement(8, "p");
        builder.AddAttribute(9, "class", "metric-value");
        builder.AddContent(10, $"Precision: {metrics.Precision}");
        builder.CloseElement();
        
        builder.OpenElement(11, "p");
        builder.AddAttribute(12, "class", "metric-value");
        builder.AddContent(13, $"Recall: {metrics.Recall}");
        builder.CloseElement();
        
        builder.OpenElement(14, "p");
        builder.AddAttribute(15, "class", "metric-value");
        builder.AddContent(16, $"Support: {metrics.Support}");
        builder.CloseElement();
        
        builder.CloseElement();
    };

    private async Task ListModels()
    {
        try
        {
            modelList = await PredictionService.GetListOfModelsAsync();

            if (modelList != null)
            {
                foreach (var model in modelList)
                {
                    selectedModels[model] = false;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error listing models: " + ex.Message;
        }
    }

    private async Task SetModelToCalcWith()
    {
        try
        {
            var selectedModel = selectedModels.FirstOrDefault(m => m.Value).Key;
            if (!string.IsNullOrEmpty(selectedModel))
            {
                var success = await PredictionService.SetModelToCalc(selectedModel);
                if (success)
                {
                    successMessage = $"Model '{selectedModel}' has been successfully set for calculations.";
                    ModelSelectionService.SetModel(selectedModel);
                }
                else
                {
                    errorMessage = $"Failed to set model '{selectedModel}'. Please try again.";
                }

                await InvokeAsync(StateHasChanged); // Refresh UI to display the success message
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error setting model: " + ex.Message;
        }
    }

    private async Task PerformActionWithCsv()
    {
        try
        {
            // Retrieve the selected CSV file
            var selectedFile = selectedCsvFiles.FirstOrDefault(f => f.Value).Key;

            if (!string.IsNullOrEmpty(selectedFile)) // Ensures there is a selected file
            {
                var jsonResult = await PredictionService.CalculateNewModelFromCsv(selectedFile);
                if (!string.IsNullOrEmpty(jsonResult))
                {
    // Assuming jsonResult is a JSON string representation of PredictionResult
                    predictionResult = JsonSerializer.Deserialize<PredictionResult>(jsonResult);
                    successMessage = $"CSV '{selectedFile}' has been successfully retrained with new model.";
                    await ListModels(); // Refresh the list of models if necessary
                }
                else
                {
                    errorMessage = "Failed to retrieve result from the service.";
                }
            }
            else
            {
                errorMessage = "No CSV file selected.";
            }

            await InvokeAsync(StateHasChanged); // Refresh UI
        }
        catch (Exception ex)
        {
            errorMessage = "Error performing action with selected CSV file: " + ex.Message;
        }
    }

    private void OnCsvCheckboxChanged(string file, bool isChecked)
    {
        try
        {
            if (selectedCsvFiles.ContainsKey(file))
            {
                // Deselect all other checkboxes
                foreach (var key in selectedCsvFiles.Keys.ToList())
                {
                    selectedCsvFiles[key] = false;
                }
                // Select the current checkbox
                selectedCsvFiles[file] = isChecked;
            }

            InvokeAsync(StateHasChanged); // Refresh UI
        }
        catch (Exception ex)
        {
            errorMessage = "Error changing checkbox: " + ex.Message;
        }
    }

    private async Task OnModelCheckboxChanged(string model, bool isChecked)
    {
        try
        {
            if (selectedModels.ContainsKey(model))
            {
                selectedModels[model] = isChecked;

                // Deselect other models if this is how you want it to behave
                foreach (var key in selectedModels.Keys.Where(k => k != model).ToList())
                {
                    selectedModels[key] = false;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorMessage = "Error changing checkbox: " + ex.Message;
        }
    }

    private async void CreateNewCsvFile()
    {
        try
        {
            var success = await PredictionService.CreateNewCsvFile(startDate, endDate);
            if (success)
            {
                await ListCsvFiles();
                successMessage = "CSV file created successfully.";
            }
            else
            {
                errorMessage = "Failed to create CSV file.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating CSV file: " + ex.Message;
        }
    }
}
<style>
.card-header {
    background-color: #28a745; /* Bootstrap success color */
    color: white;
}

.card-body {
    padding: 20px;
}

.metric-container {
    margin-bottom: 15px;
    padding: 10px;
    border-left: 3px solid #28a745;
    background-color: #f4f4f4;
}

.metric-title {
    margin-bottom: 5px;
    font-weight: bold;
}

.metric-value {
    margin: 0;
    font-size: 0.9em;
}

/* Additional styles can be added here */
</style>
