@page "/create-model"
@using PredictiveMaintenance.Interfaces
@using PredictiveMaintenance.Models
@using PredictiveMaintenance.Services
@using System.Text.Json
@using Newtonsoft.Json.Linq
@using PredictiveMaintenance.Constants
@using PredictiveMaintenance.Enums
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime JSRuntime
@inject IPredictionService PredictionService
@inject ModelSelectionService ModelSelectionService
@inject IScoreService scoreService
<style>
    .card-header {
        background-color: #28a745; /* Bootstrap success color */
        color: white;
    }

    .card-body {
        padding: 20px;
    }

    .btn-color {
        background-color: #1A759F;
        border-color: #99D98C;
    }

        .btn-color:hover {
            background-color: #68a77d; /* Darker green */
            border-color: #89b47d; /* Slightly darker green */
        }

    .custom-header-color-datasets {
        background-color: #168AAD;
    }

    .custom-header-color-range {
        background-color: #168AAD;
    }

    .custom-header-color-models {
        background-color: #168AAD;
    }

    .custom-header-color-result {
        background-color: #168AAD;
    }

    .metric-container {
        margin-bottom: 15px;
        padding: 10px;
        border-left: 3px solid #28a745;
        background-color: #f4f4f4;
    }

    .metric-title {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .metric-value {
        margin: 0;
        font-size: 0.9em;
    }

    .prediction-results-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start; /* Aligns items to the start of the container */
        gap: 10px; /* Adds space between the cards */
    }

    .prediction-card {
        flex: 0 0 24%; /* Flex-grow: 0, Flex-shrink: 0, Flex-basis: 24% */
        margin-bottom: 10px; /* Space at the bottom of each card */
        /* Adjust padding or margins as needed for spacing */
    }
</style>

<h3><b>Create Model</b></h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
<div class="row">
    @if (csvFiles != null)
    {
        <div class="col-md-6">
            <div class="card">
                <div class="card-header custom-header-color-datasets text-white"><b>Data Sets</b></div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var file in csvFiles)
                        {
                            <li class="list-group-item">
                                <input type="checkbox" checked="@selectedCsvFiles[file]" @onchange="@(e => OnCsvCheckboxChanged(file, (bool)e.Value))" /> @file
                            </li>
                        }
                    </ul>
                    <button class="btn btn-color text-white mt-2" @onclick="CalculateNewModelFromCsv">Create new model</button>
                </div>
            </div>
        </div>
    }
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="col-md-6">
                <div class="p-4">
                    <div class="text-center">
                        <img src="/images/loading.gif">
                    </div>
                </div>
            </div>
        }
        else
        {
            //no records
            <p>No recrods found.</p>
        }
    }
    <div class="col-md-1"></div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-header custom-header-color-range text-white"><b>Select Date Range</b></div>
            <div class="card-body">
                <input type="date" @bind="startDate" />
                <input type="date" @bind="endDate" />
                <div>
                    <button class="btn btn-color text-white mt-2" @onclick="CreateNewCsvFile">Create new dataset</button>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="row">
    @if (modelList != null)
    {
        <div class="col-md-6 pt-3">
            <div class="card">
                <div class="card-header custom-header-color-models text-white d-flex justify-content-between align-items-center">
                    <span><b>Machine Learning Models</b></span>
                    <span><b>Compare</b></span>
                </div>
                <div class="card-body">
                    @foreach (var model in modelList)
                    {
                        <div class="row align-items-center mb-2">
                            <!-- Left checkbox -->
                            <div class="col-md-1">
                                <input class="form-check-input" type="checkbox" value="@model"
                                       checked="@selectedModels[model]"
                                       @onchange="@(e => OnModelCheckboxChanged(model, (bool)e.Value))" />
                            </div>

                            <!-- Model label -->
                            <div class="col-md-10 text-left">
                                <label>@model</label>
                            </div>

                            <!-- Right checkbox -->
                            <div class="col-md-1 text-left">
                                <input class="form-check-input" type="checkbox" value="@model"
                                       @onchange="@(e => OnSecondCheckboxChanged(model, (bool)e.Value))" />
                            </div>
                        </div>
                    }
                    <button class="btn btn-color text-white mt-2 p" @onclick="SetModelToCalcWith">Load model</button>
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="pt-3">
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="col-md-6">
                <div class="p-4">
                    <div class="text-center">
                        <img src="/images/loading.gif">
                    </div>
                </div>
            </div>
        }
        else
        {
            //no records
            <p>No recrods found.</p>
        }
    }
  
  @*<RadzenChart>

    <RadzenChartValueAxis>
    <RadzenChartAxis Min="0" Max="100" Step="0.1" />
    </RadzenChartValueAxis>
    <RadzenColumnSeries Data="@GraphModelCreationSCores" Title="Number" CategoryProperty="Name" ValueProperty="Number" />
    </RadzenChart>*@
</div>
@if (predictionResults != null)
{
    <div class="prediction-results-container pt-3">
        @foreach (var result in predictionResults)
        {
            @RenderFragments.CreatePredictionCard(result)
        }
    </div>
}

@code {
    private PredictionResult predictionResult;
    private List<string> csvFiles;
    private List<string> modelList;
    private Dictionary<string, bool> selectedModels = new Dictionary<string, bool>();
    private Dictionary<string, bool> selectedCsvFiles = new Dictionary<string, bool>();
    private Dictionary<string, bool> newCheckboxStates = new Dictionary<string, bool>();
    List<PredictionResult> predictionResults = new();
    private string successMessage;
    private string errorMessage;
    private DateTime startDate = DateTime.Now.AddDays(-30); 
    private DateTime endDate = DateTime.Now; 
    bool showDataLabels = false;
    //private List<GraphScores> GraphModelCreationSCores = new();
    private GraphScores[] GraphModelCreationScores = new GraphScores[0];


    protected async override Task OnInitializedAsync()
    {
        try
        {
            await ListModels();

            if (modelList != null)
            {
                foreach (var model in modelList)
                {
                    selectedModels[model] = false;
                }
            }
            var scoreList = await scoreService.GetAllSCoresAsync();
            if (scoreList.Count > 0)
            {
                foreach (var score in scoreList)
                {
                    var predictionResult = JsonSerializer.Deserialize<PredictionResult>(score.JSonData);
                }
            }
       
           
            //AddModel();
            await ListCsvFiles();
        }
        catch (Exception ex)
        {
            errorMessage = "Initialization Error: " + ex.Message;
        }
    }

    private async Task ListCsvFiles()
    {
        try
        {
            DateTime dateTime = DateTime.Now; // Or any required date
            csvFiles = await PredictionService.GetCsvFileData(dateTime);

            if (csvFiles != null)
            {
                foreach (var file in csvFiles)
                {
                    selectedCsvFiles[file] = false; // Initialize all as not selected
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error listing CSV files: " + ex.Message;
        }
    }

    public async void OnSecondCheckboxChanged(string model, bool checkbox)
    {
        var jsonResult = await scoreService.GetScoreForModel(model);
        var predictionResult = JsonSerializer.Deserialize<PredictionResult>(jsonResult.JSonData);
        if (checkbox)
        {
      
            predictionResults.Add(predictionResult); 
            //AddModel(predictionResult.Status, predictionResult.RocAucScore);
        }
        else
        {
            var itemToRemove = predictionResults.FirstOrDefault(x => x.Status == predictionResult.Status);
            if (itemToRemove != null)
            {
                predictionResults.Remove(itemToRemove);
            }
        }
        InvokeAsync(StateHasChanged);

    }


    private async Task ListModels()
    {
        try
        {
            modelList = await PredictionService.GetListOfModelsAsync();

            if (modelList != null)
            {
                foreach (var model in modelList)
                {
                    selectedModels[model] = false;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error listing models: " + ex.Message;
        }
    }

    private async Task SetModelToCalcWith()
    {
        try
        {
            var selectedModel = selectedModels.FirstOrDefault(m => m.Value).Key;
            if (!string.IsNullOrEmpty(selectedModel))
            {
                var success = await PredictionService.SetModelToCalc(selectedModel);
                if (success)
                {
                    successMessage = $"Model '{selectedModel}' has been successfully set for calculations.";
                    ModelSelectionService.SetModel(selectedModel);
                }
                else
                {
                    errorMessage = $"Failed to set model '{selectedModel}'. Please try again.";
                }

                await InvokeAsync(StateHasChanged); // Refresh UI to display the success message
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error setting model: " + ex.Message;
        }
    }

    private async Task CalculateNewModelFromCsv()
    {
        try
        {
            var selectedFile = selectedCsvFiles.FirstOrDefault(f => f.Value).Key;

            if (!string.IsNullOrEmpty(selectedFile))
            {
                var jsonResult = await PredictionService.CalculateNewModelFromCsv(selectedFile);
                if (!string.IsNullOrEmpty(jsonResult))
                {
                    JObject jsonObject = JObject.Parse(jsonResult);
                    var statusObjectNeedsToBeChanged = jsonObject["model_name"].ToString();
                    scoreService.CreateScoreForModel(new ModelCreationScores { FileName = statusObjectNeedsToBeChanged, JSonData = jsonResult });
                    predictionResult = JsonSerializer.Deserialize<PredictionResult>(jsonResult);
                    successMessage = $"CSV '{selectedFile}' has been successfully retrained with new model.";
                    await ListModels();
                    errorMessage = "";
                }
                else
                {
                    errorMessage = "Failed to retrieve result from the service.";
                }
            }
            else
            {
                errorMessage = "No CSV file selected.";
            }

            await InvokeAsync(StateHasChanged); // Refresh UI
        }
        catch (Exception ex)
        {
            errorMessage = "Error performing action with selected CSV file: " + ex.Message;
        }
    }

    private void OnCsvCheckboxChanged(string file, bool isChecked)
    {
        try
        {
            if (selectedCsvFiles.ContainsKey(file))
            {
                // Deselect all other checkboxes
                foreach (var key in selectedCsvFiles.Keys.ToList())
                {
                    selectedCsvFiles[key] = false;
                }
                // Select the current checkbox
                selectedCsvFiles[file] = isChecked;
            }

            InvokeAsync(StateHasChanged); // Refresh UI
        }
        catch (Exception ex)
        {
            errorMessage = "Error changing checkbox: " + ex.Message;
        }
    }

    private async Task OnModelCheckboxChanged(string model, bool isChecked)
    {
        try
        {
            if (selectedModels.ContainsKey(model))
            {
                selectedModels[model] = isChecked;

                // Deselect other models if this is how you want it to behave
                foreach (var key in selectedModels.Keys.Where(k => k != model).ToList())
                {
                    selectedModels[key] = false;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorMessage = "Error changing checkbox: " + ex.Message;
        }
    }

    private async void CreateNewCsvFile()
    {
        try
        {
            var success = await PredictionService.CreateNewCsvFile(startDate, endDate);
            if (success)
            {
                await ListCsvFiles();
                successMessage = "CSV file created successfully.";
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                errorMessage = "Failed to create CSV file.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating CSV file: " + ex.Message;
        }
    }
}
