@page "/Predictive-maintenance-entry"
@using PredictiveMaintenance.Enums
@using PredictiveMaintenance.Interfaces
@using PredictiveMaintenance.Models
@using PredictiveMaintenance.Services
@inject IMaintenanceService MaintenanceService
@inject IPredictionService PredictionService
@inject IJSRuntime JSRuntime
@inject ModelSelectionService ModelSelectionService
<style>
    .btn-color {
        background-color: #1A759F;
        border-color: #168AAD;
    }

        .btn-color:hover {
            background-color: #184E77; /* Darker green */
            border-color: #1E6091; /* Slightly darker green */
        }
</style>

<div class="d-flex justify-content-between">
    <!-- Maintenance Record Form -->
    <div>
        <h3><b>Add New Maintenance Record</b></h3>
        <EditForm Model="@newMaintenanceModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Form inputs -->
            <div class="form-group">
                <label for="udi">UDI:</label>
                <InputNumber id="udi" class="form-control" @bind-Value="newMaintenanceModel.UDI" />
            </div>

            <div class="form-group">
                <label for="productID">Product ID:</label>
                <Select id="productID" class="form-control" @bind-Value="newMaintenanceModel.ProductID" @bind-Value:event="onchange">
                    @foreach (var engine in Enum.GetValues<EngineEnums>())
                    {
                        <option value="@engine.ToString()">@engine</option>
                    }
                </Select>
            </div>
            <div class="form-group">
                <label for="type">Type:</label>
                <InputText id="type" class="form-control" @bind-Value="newMaintenanceModel.Type" />
            </div>

            <div class="form-group">
                <label for="airTemperature">Air Temperature:</label>
                <InputNumber id="airTemperature" class="form-control" @bind-Value="newMaintenanceModel.AirTemperature" />
            </div>

            <div class="form-group">
                <label for="processTemperature">Process Temperature:</label>
                <InputNumber id="processTemperature" class="form-control" @bind-Value="newMaintenanceModel.ProcessTemperature" />
            </div>

            <div class="form-group">
                <label for="rotationalSpeed">Rotational Speed:</label>
                <InputNumber id="rotationalSpeed" class="form-control" @bind-Value="newMaintenanceModel.RotationalSpeed" />
            </div>

            <div class="form-group">
                <label for="torque">Torque:</label>
                <InputNumber id="torque" class="form-control" @bind-Value="newMaintenanceModel.Torque" />
            </div>

            <div class="form-group">
                <label for="toolWear">Tool Wear:</label>
                <InputNumber id="toolWear" class="form-control" @bind-Value="newMaintenanceModel.ToolWear" />
            </div>

            <div class="form-group">
                <label for="predictionFromModel">Prediction From Model:</label>
                <InputNumber id="predictionFromModel" class="form-control" @bind-Value="newMaintenanceModel.PredictionFromModel" />
            </div>
            <div class="pt-2 pb-3">
                <button type="submit" class="btn btn-color text-white">Submit</button>
            </div>

        </EditForm>
        <div class="form-group">
            <label for="randomRecordSeconds">Seconds:</label>
            <input type="number" id="randomRecordSeconds" class="form-control" @bind="randomRecordSeconds" min="1" />
        </div>
        <div class="pt-3 pb-4">
            <button class="btn btn-color text-white" @onclick="() => StartTimer(randomRecordSeconds)">Start Monitoring</button>
            <button class="btn btn-danger" @onclick="StopTimer">Stop Monitoring</button>
        </div>
        <div class="progress-bar">
            <div class="progress-bar-fill" style="width: @progressPercentage%;"></div>
        </div>

    </div>

    <!-- Three.js Visualization and Controls -->
    <div>
        <svg height="@svgHeight" width="@svgWidth">
            @for (int row = 0; row < 4; row++)
            {
                for (int i = 0; i < 5; i++)
                {
                    int circleNumber = row * 5 + i;
                    if (circleNumber < 20) // As there are 20 engines
                    {
                        <circle cx="@(startX + (i * circleSpacingX))" cy="@(startY + (row * circleSpacingY))" r="@circleRadius" stroke="black" stroke-width="@strokeWidth" fill="@GetColor((EngineEnums)(circleNumber + 1))" />

                        if (i > 0) // Draw line to previous circle in the row
                        {
                            <line x1="@(startX + (i * circleSpacingX) - circleSpacingX)" y1="@(startY + (row * circleSpacingY))" x2="@(startX + (i * circleSpacingX))" y2="@(startY + (row * circleSpacingY))" stroke="black" />
                        }
                    }
                }

                if (row > 0) // Draw line to the circle above in the previous row
                {
                    for (int i = 0; i < 5; i++)
                    {
                        <line x1="@(startX + (i * circleSpacingX))" y1="@(startY + (row * circleSpacingY) - circleSpacingY)" x2="@(startX + (i * circleSpacingX))" y2="@(startY + (row * circleSpacingY))" stroke="black" />
                    }
                }
            }
        </svg>
    </div>
</div>

<h3>Maintenance Records</h3>

@if (paginatedMaintenanceModelsList != null && paginatedMaintenanceModelsList.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>UDI</th>
                <th>Product ID</th>
                <th>Type</th>
                <th>Air Temperature</th>
                <th>Process Temperature</th>
                <th>Rotational Speed</th>
                <th>Torque</th>
                <th>Tool Wear</th>
                <th>Prediction From Model</th>
                <th>Failure type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in paginatedMaintenanceModelsList)
            {
                <tr style="background-color: @(item.PredictionFromModel >= 1 ? "#ffcccc" : "transparent")">
                    <td>@item.UDI</td>
                    <td>@item.ProductID</td>
                    <td>@item.Type</td>
                    <td>@item.AirTemperature</td>
                    <td>@item.ProcessTemperature</td>
                    <td>@item.RotationalSpeed</td>
                    <td>@item.Torque</td>
                    <td>@item.ToolWear</td>
                    <td>@item.PredictionFromModel</td>
                    <td>@item.FailuresEnums.GetDescription()</td>
                    <!-- Add a new column for delete button -->
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteRecord(item.UDI)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pb-5">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>
}

