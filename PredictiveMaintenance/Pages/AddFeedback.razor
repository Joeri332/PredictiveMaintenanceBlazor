@page "/add-feedback"
@using PredictiveMaintenance.Enums
@using PredictiveMaintenance.Interfaces
@using PredictiveMaintenance.Models
@inject IOperatorFeedbackService OperatorFeedbackService
@inject IMaintenanceService MaintenanceDataService 
<h3>Add Operator Feedback</h3>

@if (feedbackGiven == null || maintenanceRecords == null)
{
    <p>Loading...</p>
}
else
{

    <h3>Maintenance Records</h3>

    @if (feedbackGiven.Count > 0)
{
        <table class="table">
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Feedback</th>
                    <th>PredictionFromModel</th>
                    <th>FailureType</th>
                    <th>IsPredictionCorrect</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var feedback in feedbackGiven)
                {
                    <tr style="background-color: @(!feedback.IsPredictionCorrect ? "#ffcccc" : "transparent")">
                        <td>@feedback.PredictiveMaintenance.ProductID</td>
                        <td>@feedback.SolutionUsed</td>
                        <td>@feedback.PredictiveMaintenance.PredictionFromModel</td>
                        <td>@feedback.PredictiveMaintenance.FailuresEnums</td>
                        <td>@feedback.IsPredictionCorrect</td>     
                    </tr>
                }
            </tbody>
        </table>
  }
    else
    {
        <p>No feedback given yet.</p>
    }

    if (maintenanceRecords.Count == 0)
    {
        <p>No maintenance records found.</p>
    }
    else
    {
        <EditForm Model="@feedback" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="maintenanceRecord">Select Maintenance Record:</label>
                <select id="maintenanceRecord" @bind="feedback.UDI" class="form-control">
                    <option value="">-- Select a Record --</option>
                    @foreach (var record in maintenanceRecords)
                    {
                        <option value="@record.UDI">UDI: @record.UDI - Product ID: @record.ProductID - Date: @record.CreatedAt</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="failureType">Failure Type:</label>
                <select id="failureType" @bind="feedback.Failures" class="form-control">
                    <option value="">-- Select a Failure Type --</option>
                    @foreach (FailuresEnums failureType in Enum.GetValues(typeof(FailuresEnums)))
                    {
                        <option value="@failureType">@EnumExtensions.GetDescription(failureType)</option>
                    }
                </select>
            </div>


            <div class="form-group">
                <label for="isPredictionCorrect">Was the Prediction Correct?</label>
                <InputCheckbox id="isPredictionCorrect" @bind-Value="feedback.IsPredictionCorrect" class="form-check-input" />
            </div>

            <div class="form-group">
                <label for="solutionUsed">Solution Used:</label>
                <InputTextArea id="solutionUsed" @bind-Value="feedback.SolutionUsed" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Submit Feedback</button>
        </EditForm>
    }
}

@code {
    private OperatorFeedback feedback = new OperatorFeedback();
    private List<PredictiveMaintenanceModel> maintenanceRecords;
    private List<OperatorFeedback> feedbackGiven;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            maintenanceRecords = await MaintenanceDataService.GetMaintenanceDataAsync() ?? new List<PredictiveMaintenanceModel>();
            feedbackGiven = await OperatorFeedbackService.GetFeedbacksWithProductIdAsync() ?? new List<OperatorFeedback>();
        }
        catch (Exception ex)
        {
            errorMessage = "Error initializing data: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            bool result = await OperatorFeedbackService.CreateFeedbackAsync(feedback);
            if (result)
            {
                feedback = new OperatorFeedback(); // Reset the form for new feedback
                feedbackGiven = await OperatorFeedbackService.GetFeedbacksWithProductIdAsync() ?? new List<OperatorFeedback>(); // Refresh the list
    // Optionally, include logic to show a success message
            }
            else
            {
    // Handle the error case, e.g., show an error message
                errorMessage = "Feedback submission failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error submitting feedback: " + ex.Message;
        }
    }

    // UI Component for displaying error messages
    private RenderFragment DisplayErrorMessage() => builder =>
    {
        if (!string.IsNullOrEmpty(errorMessage))
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "error-message");
            builder.AddContent(2, errorMessage);
            builder.CloseElement();
        }
    };
}
