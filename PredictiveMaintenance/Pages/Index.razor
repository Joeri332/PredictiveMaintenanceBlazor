@page "/"
@inject IJSRuntime JSRuntime

<svg height="200" width="300">
    @for (int row = 0; row < 2; row++)
    {
        for (int i = 0; i < 5; i++)
        {
            int circleNumber = row * 5 + i;
            <circle cx="@((i * 50) + 25)" cy="@((row * 100) + 50)" r="20" stroke="black" stroke-width="3" fill="@GetColor(circleNumber)" id="@($"circle{circleNumber}")" />

            if (i > 0) // Draw line to previous circle in the row
            {
                <line x1="@((i * 50) - 25)" y1="@((row * 100) + 50)" x2="@((i * 50) + 25)" y2="@((row * 100) + 50)" stroke="black" />
            }
        }

        if (row > 0) // Draw line to the circle above in the previous row
        {
            for (int i = 0; i < 5; i++)
            {
                <line x1="@((i * 50) + 25)" y1="50" x2="@((i * 50) + 25)" y2="150" stroke="black" />
            }
        }
    }
</svg>

<!-- UI for changing circle color -->
<div>
    <label for="circleNumber">Circle Number (0-9):</label>
    <input type="number" id="circleNumber" @bind="selectedCircle" min="0" max="9" />

    <label for="colorPicker">Color:</label>
    <input type="color" id="colorPicker" @bind="selectedColor" />

    <button @onclick="ApplyColorChange">Change Color</button>
</div>

@code {
    private string[] colors = Enumerable.Repeat("blue", 10).ToArray();
    private int selectedCircle;
    private string selectedColor = "#0000ff"; // default color blue

    private string GetColor(int circleNumber)
    {
        return colors[circleNumber];
    }

    private void ApplyColorChange()
    {
        ChangeCircleColor(selectedCircle, selectedColor);
    }

    public void ChangeCircleColor(int circleNumber, string color)
    {
        if (circleNumber >= 0 && circleNumber < colors.Length)
        {
            colors[circleNumber] = color;
            StateHasChanged(); // Re-render the component with new color
        }
    }
}