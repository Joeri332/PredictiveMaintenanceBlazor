@page "/"
@using PredictiveMaintenance.Enums
@inject IJSRuntime JSRuntime

<svg height="400" width="300">
    @for (int row = 0; row < 4; row++)
    {
        for (int i = 0; i < 5; i++)
        {
            int circleNumber = row * 5 + i;
            if (circleNumber < 20) // As there are 20 engines
            {
                <circle cx="@((i * 50) + 25)" cy="@((row * 50) + 25)" r="20" stroke="black" stroke-width="3" fill="@GetColor((EngineEnums)(circleNumber + 1))" />
                
                if (i > 0) // Draw line to previous circle in the row
                {
                    <line x1="@((i * 50) - 25)" y1="@((row * 50) + 25)" x2="@((i * 50) + 25)" y2="@((row * 50) + 25)" stroke="black" />
                }
            }
        }

        if (row > 0) // Draw line to the circle above in the previous row
        {
            for (int i = 0; i < 5; i++)
            {
                <line x1="@((i * 50) + 25)" y1="@((row * 50) - 25)" x2="@((i * 50) + 25)" y2="@((row * 50) + 25)" stroke="black" />
            }
        }
    }
</svg>

@code {
    private string[] colors = Enumerable.Repeat("grey", 20).ToArray(); // Initialize all engines to grey

    private string GetColor(EngineEnums engine)
    {
        return colors[(int)engine - 1];
    }

    // Call this method to change the color of an engine
    public void SetEngineColor(EngineEnums engine, bool shouldBeRed)
    {
        int index = (int)engine - 1;
        colors[index] = shouldBeRed ? "red" : "black";
        StateHasChanged(); // Re-render the component with new color
    }
}